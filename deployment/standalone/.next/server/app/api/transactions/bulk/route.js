"use strict";(()=>{var e={};e.id=9959,e.ids=[9959],e.modules={72934:e=>{e.exports=require("next/dist/client/components/action-async-storage.external.js")},54580:e=>{e.exports=require("next/dist/client/components/request-async-storage.external.js")},45869:e=>{e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},14300:e=>{e.exports=require("buffer")},6113:e=>{e.exports=require("crypto")},82361:e=>{e.exports=require("events")},13685:e=>{e.exports=require("http")},95687:e=>{e.exports=require("https")},41808:e=>{e.exports=require("net")},85477:e=>{e.exports=require("punycode")},12781:e=>{e.exports=require("stream")},24404:e=>{e.exports=require("tls")},57310:e=>{e.exports=require("url")},59796:e=>{e.exports=require("zlib")},70887:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>g,originalPathname:()=>f,patchFetch:()=>b,requestAsyncStorage:()=>p,routeModule:()=>u,serverHooks:()=>h,staticGenerationAsyncStorage:()=>d,staticGenerationBailout:()=>m});var o={};r.r(o),r.d(o,{POST:()=>c});var s=r(95419),n=r(69108),a=r(99678),i=r(42509),l=r(78070);async function c(e){console.log("Bulk transactions API called");try{let t=await (0,i.e)(),r=(await e.json()).transactions||[];if(!Array.isArray(r)||0===r.length)return console.error("Invalid request body: transactions array is empty or not provided"),l.Z.json({error:"transactions array is required"},{status:400});console.log(`Received ${r.length} transactions for bulk insert`);let o=0,s=0;for(let e=0;e<r.length;e+=50){let n=r.slice(e,e+Math.min(50,r.length-e));console.log(`Processing batch ${e+1} to ${e+n.length} of ${r.length}`);try{let{data:e,error:r}=await t.from("transactions").insert(n).select("id");r?(console.error("Error inserting batch:",r),s+=n.length):(console.log(`Successfully inserted ${e.length} transactions`),o+=e.length)}catch(e){console.error("Batch insert failed:",e),s+=n.length}}return console.log(`Bulk insert completed: ${o} succeeded, ${s} failed`),l.Z.json({success:!0,count:o,errors:s,message:`Successfully processed ${o} transactions with ${s} errors`})}catch(e){return console.error("Unhandled error in bulk transactions endpoint:",e),l.Z.json({error:"Failed to process transactions",details:e instanceof Error?e.message:String(e)},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/transactions/bulk/route",pathname:"/api/transactions/bulk",filename:"route",bundlePath:"app/api/transactions/bulk/route"},resolvedPagePath:"E:\\copycoder-2025-04-13T00-58-05-829Z\\src\\app\\api\\transactions\\bulk\\route.ts",nextConfigOutput:"standalone",userland:o}),{requestAsyncStorage:p,staticGenerationAsyncStorage:d,serverHooks:h,headerHooks:g,staticGenerationBailout:m}=u,f="/api/transactions/bulk/route";function b(){return(0,a.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:d})}},42509:(e,t,r)=>{let o;r.d(t,{e:()=>i});var s=r(24459),n=r(7439);try{o=global.fetch}catch(e){console.warn("Native fetch not available, using polyfill would be needed")}let a=e=>new Promise(t=>setTimeout(t,e)),i=async(e=3)=>{try{console.log("Creating server-side Supabase client...");let t=(0,n.cookies)(),r="https://your-project-id.supabase.co".trim(),i="your-supabase-anon-key".trim();if(!r||!i)throw console.error("Missing Supabase environment variables:",r?"":"NEXT_PUBLIC_SUPABASE_URL",i?"":"NEXT_PUBLIC_SUPABASE_ANON_KEY"),Error("Missing required Supabase configuration");let l=null;for(let n=1;n<=e;n++)try{console.log(`Attempt ${n} of ${e} to create Supabase client`);let a=(0,s.lx)(r,i,{cookies:{get:e=>t.get(e)?.value},auth:{persistSession:!1,autoRefreshToken:!1},global:{fetch:o,headers:{"X-Client-Info":"next-server-supabase"}},db:{schema:"public"},realtime:{timeout:1e4}});try{let e=await a.from("health_check").select("*").limit(1).maybeSingle();if(e.error)throw console.warn(`Health check failed on attempt ${n}:`,e.error),e.error;console.log("Supabase server client created and verified successfully")}catch(e){if(e.message&&e.message.includes('relation "health_check" does not exist'))console.log("Health check table does not exist, but connection seems good");else throw e}return a}catch(t){if(l=t,console.error(`Failed to initialize Supabase client (attempt ${n}/${e}):`,t),n<e){let e=Math.min(500*Math.pow(2,n-1),5e3);console.log(`Retrying in ${e}ms...`),await a(e)}}throw Error(`Supabase client initialization failed after ${e} attempts: ${l instanceof Error?l.message:String(l)}`)}catch(e){throw console.error("Error creating Supabase server client:",e),e}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[1638,6206,7439,4459],()=>r(70887));module.exports=o})();